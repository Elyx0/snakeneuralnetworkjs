<!DOCTYPE html>
<!--[if lt IE 7 ]> <html lang="en" class="ie6" <% if(htmlWebpackPlugin.files.manifest) { %> manifest="<%= htmlWebpackPlugin.files.manifest %>"<% } %>> <![endif]-->
<!--[if IE 7 ]>    <html lang="en" class="ie7" <% if(htmlWebpackPlugin.files.manifest) { %> manifest="<%= htmlWebpackPlugin.files.manifest %>"<% } %>> <![endif]-->
<!--[if IE 8 ]>    <html lang="en" class="ie8" <% if(htmlWebpackPlugin.files.manifest) { %> manifest="<%= htmlWebpackPlugin.files.manifest %>"<% } %>> <![endif]-->
<!--[if IE 9 ]>    <html lang="en" class="ie9" <% if(htmlWebpackPlugin.files.manifest) { %> manifest="<%= htmlWebpackPlugin.files.manifest %>"<% } %>> <![endif]-->
<!--[if (gt IE 9)|!(IE)]><!--> <html lang="en" class="" <% if(htmlWebpackPlugin.files.manifest) { %> manifest="<%= htmlWebpackPlugin.files.manifest %>"<% } %>> <!--<![endif]-->
<head>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.5.6/p5.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.5.6/addons/p5.dom.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.5.0/Chart.bundle.min.js"></script>
  <script>
  _collideDebug = false;
  function distNotSquared(x1,y1,x2,y2) {
    return (x2-x1)*(x2-x1)+(y2-y1)*(y2-y1);
  }

  function collideLineLine(x1, y1, x2, y2, x3, y3, x4, y4,calcIntersection) {

    var intersection;

    // calculate the distance to intersection point
    var uA = ((x4-x3)*(y1-y3) - (y4-y3)*(x1-x3)) / ((y4-y3)*(x2-x1) - (x4-x3)*(y2-y1));
    var uB = ((x2-x1)*(y1-y3) - (y2-y1)*(x1-x3)) / ((y4-y3)*(x2-x1) - (x4-x3)*(y2-y1));

    // if uA and uB are between 0-1, lines are colliding
    if (uA >= 0 && uA <= 1 && uB >= 0 && uB <= 1) {

      if(_collideDebug || calcIntersection){
        // calc the point where the lines meet
        var intersectionX = x1 + (uA * (x2-x1));
        var intersectionY = y1 + (uA * (y2-y1));
      }

      if(calcIntersection){
        intersection = {
          "x":intersectionX,
          "y":intersectionY
        }
        return intersection;
      }else{
        return true;
      }
    }
    if(calcIntersection){
      intersection = {
        "x":false,
        "y":false
      }
      return intersection;
    }
    return false;
  }


  p5.prototype.collideLineCircle = function( x1,  y1,  x2,  y2,  cx,  cy,  diameter) {
   // is either end INSIDE the circle?
   // if so, return true immediately
   var inside1 = collidePointCircle(x1,y1, cx,cy,diameter);
   var inside2 = collidePointCircle(x2,y2, cx,cy,diameter);
   if (inside1 || inside2) return true;

   // get length of the line
   var distX = x1 - x2;
   var distY = y1 - y2;
   var len = ( (distX*distX) + (distY*distY) );

   // get dot product of the line and circle
   var dot = ( ((cx-x1)*(x2-x1)) + ((cy-y1)*(y2-y1)) ) / len;

   // find the closest point on the line
   var closestX = x1 + (dot * (x2-x1));
   var closestY = y1 + (dot * (y2-y1));

   // is this point actually on the line segment?
   // if so keep going, but if not, return false
   var onSegment = collidePointLine(closestX,closestY,x1,y1,x2,y2);
   if (!onSegment) return false;

   // draw a debug circle at the closest point on the line
   if(_collideDebug){
     ellipse(closestX, closestY,10,10);
   }

   // get distance to closest point
   distX = closestX - cx;
   distY = closestY - cy;
   var distance = sqrt( (distX*distX) + (distY*distY) );

   if (distance <= diameter/2) {
     return [closestX,closestY];
   }
   return false;
  }

  function collidePointCircle(x, y, cx, cy, d) {
  //2d
  if( distNotSquared(x,y,cx,cy) <= (d/2)*(d/2) ){
    return true;
  }
  return false;
  };

  p5.prototype.collidePointLine = function(px,py,x1,y1,x2,y2, buffer){
    // get distance from the point to the two ends of the line
  var d1 = dist(px,py, x1,y1);
  var d2 = dist(px,py, x2,y2);

  // get the length of the line
  var lineLen = dist(x1,y1, x2,y2);

  // since floats are so minutely accurate, add a little buffer zone that will give collision
  if (buffer === undefined){ buffer = 0.1; }   // higher # = less accurate

  // if the two distances are equal to the line's length, the point is on the line!
  // note we use the buffer here to give a range, rather than one #
  if (d1+d2 >= lineLen-buffer && d1+d2 <= lineLen+buffer) {
    return true;
  }
  return false;
  }
  </script>
  <meta charset="utf-8">
  <title><%= htmlWebpackPlugin.options.title || 'Webpack App'%></title>

  <% if (htmlWebpackPlugin.files.favicon) { %>
  <link rel="shortcut icon" href="<%= htmlWebpackPlugin.files.favicon%>">
  <% } %>
  <% if (htmlWebpackPlugin.options.mobile) { %>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <% } %>


</head>
<body>
<% if (htmlWebpackPlugin.options.unsupportedBrowser) { %>
<style>.unsupported-browser { display: none; }</style>
<div class="unsupported-browser">
  Sorry, your browser is not supported.  Please upgrade to
  the latest version or switch your browser to use this site.
  See <a href="http://outdatedbrowser.com/">outdatedbrowser.com</a>
  for options.
</div>
<% } %>


<% if (htmlWebpackPlugin.options.window) { %>
<script>
  <% for (var varName in htmlWebpackPlugin.options.window) { %>
    window['<%=varName%>'] = <%= JSON.stringify(htmlWebpackPlugin.options.window[varName]) %>;
  <% } %>
</script>
<% } %>
<div class="container">
  <div id="sketch-holder"></div>
  <div id="debug-holder">
    <div id="debug">

    </div>
  </div>
  <div id="charts-holder">
    <div class="charts">
      <canvas id="perfChart" width="400" height="400"></canvas>
    </div>
  </div>

  <div id="age-charts-holder">
    <div class="charts">
      <canvas id="ageChart" width="400" height="400"></canvas>
    </div>
  </div>

  <div class="" id="genealogic-holder">
    <div class="genealogic-wrapper">

    </div>
  </div>
  <div id="explain-holder"></div>
</div>

</body>
</html>
